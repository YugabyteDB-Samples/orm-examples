/*
 * This file is generated by jOOQ.
 */
package com.yugabyte.jooqdemo.db.tables;


import com.yugabyte.jooqdemo.db.Jooq;
import com.yugabyte.jooqdemo.db.Keys;
import com.yugabyte.jooqdemo.db.tables.records.OrdersRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.2",
        "schema version:jooq_1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>jooq.orders.order_id</code>.
     */
    public final TableField<OrdersRecord, UUID> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>jooq.orders.user_id</code>.
     */
    public final TableField<OrdersRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>jooq.orders.order_total</code>.
     */
    public final TableField<OrdersRecord, BigDecimal> ORDER_TOTAL = createField(DSL.name("order_total"), SQLDataType.NUMERIC(10, 2).nullable(false), this, "");

    /**
     * The column <code>jooq.orders.order_time</code>.
     */
    public final TableField<OrdersRecord, OffsetDateTime> ORDER_TIME = createField(DSL.name("order_time"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq.orders</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>jooq.orders</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    /**
     * Create a <code>jooq.orders</code> table reference
     */
    public Orders() {
        this(DSL.name("orders"), null);
    }

    public <O extends Record> Orders(Table<O> child, ForeignKey<O, OrdersRecord> key) {
        super(child, key, ORDERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jooq.JOOQ;
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Keys.PK_ORDERS;
    }

    @Override
    public List<ForeignKey<OrdersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDERS__FK_ORDERS_USERS);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>jooq.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.ORDERS__FK_ORDERS_USERS);

        return _users;
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, Long, BigDecimal, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
