/*
 * This file is generated by jOOQ.
 */
package com.yugabyte.jooqdemo.db.tables;


import com.yugabyte.jooqdemo.db.Jooq;
import com.yugabyte.jooqdemo.db.Keys;
import com.yugabyte.jooqdemo.db.tables.records.OrderLinesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.16.2",
        "schema version:jooq_1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderLines extends TableImpl<OrderLinesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>jooq.order_lines</code>
     */
    public static final OrderLines ORDER_LINES = new OrderLines();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderLinesRecord> getRecordType() {
        return OrderLinesRecord.class;
    }

    /**
     * The column <code>jooq.order_lines.order_id</code>.
     */
    public final TableField<OrderLinesRecord, UUID> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>jooq.order_lines.product_id</code>.
     */
    public final TableField<OrderLinesRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>jooq.order_lines.units</code>.
     */
    public final TableField<OrderLinesRecord, Integer> UNITS = createField(DSL.name("units"), SQLDataType.INTEGER.nullable(false), this, "");

    private OrderLines(Name alias, Table<OrderLinesRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderLines(Name alias, Table<OrderLinesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>jooq.order_lines</code> table reference
     */
    public OrderLines(String alias) {
        this(DSL.name(alias), ORDER_LINES);
    }

    /**
     * Create an aliased <code>jooq.order_lines</code> table reference
     */
    public OrderLines(Name alias) {
        this(alias, ORDER_LINES);
    }

    /**
     * Create a <code>jooq.order_lines</code> table reference
     */
    public OrderLines() {
        this(DSL.name("order_lines"), null);
    }

    public <O extends Record> OrderLines(Table<O> child, ForeignKey<O, OrderLinesRecord> key) {
        super(child, key, ORDER_LINES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Jooq.JOOQ;
    }

    @Override
    public UniqueKey<OrderLinesRecord> getPrimaryKey() {
        return Keys.PK_ORDER_LINES;
    }

    @Override
    public List<ForeignKey<OrderLinesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ORDER_LINES__FK_ORDER_LINES_ORDERS, Keys.ORDER_LINES__FK_ORDER_LINES_PRODUCTS);
    }

    private transient Orders _orders;
    private transient Products _products;

    /**
     * Get the implicit join path to the <code>jooq.orders</code> table.
     */
    public Orders orders() {
        if (_orders == null)
            _orders = new Orders(this, Keys.ORDER_LINES__FK_ORDER_LINES_ORDERS);

        return _orders;
    }

    /**
     * Get the implicit join path to the <code>jooq.products</code> table.
     */
    public Products products() {
        if (_products == null)
            _products = new Products(this, Keys.ORDER_LINES__FK_ORDER_LINES_PRODUCTS);

        return _products;
    }

    @Override
    public OrderLines as(String alias) {
        return new OrderLines(DSL.name(alias), this);
    }

    @Override
    public OrderLines as(Name alias) {
        return new OrderLines(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderLines rename(String name) {
        return new OrderLines(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderLines rename(Name name) {
        return new OrderLines(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, Long, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
